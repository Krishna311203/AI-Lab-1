Aim:
To implement DFS and BFS for an application.

DFS Algorithm:
1.Push the root node in the stack.
2.Peek the node of the stack.
3.If the node has unvisited child nodes, get the unvisited child node, mark it as traversed and push it on stack.
4.If the node does not have any unvisited child nodes, pop the node from the stack.

BFS Algorithm:
1.Push the root node in the queue.
2.Loop until the queue is empty.
3.Remove the node from the queue.
4.If the removed node has unvisited child nodes, mark them as visited and insert the unvisited children in the queue.

DFS Program:
def dfs(graph, start, visited=None):
    if visited is None:
        visited = set()
    visited.add(start)
    print(start)

    for next in graph[start] - visited:
        dfs(graph, next, visited)
    return visited

graph = {'0': set(['1', '2']),
         '1': set(['0', '3', '4']),
         '2': set(['0']),
         '3': set(['1']),
         '4': set(['2', '3'])}
dfs(graph, '0')

Output:
0
2
1
4
3
3

BFS Program:
import collections
def bfs(graph, root):

    visited, queue = set(), collections.deque([root])
    visited.add(root)

    while queue:
        vertex = queue.popleft()
        print(str(vertex) + " ", end="")
        for neighbour in graph[vertex]:
            if neighbour not in visited:
                visited.add(neighbour)
                queue.append(neighbour)


if __name__ == '__main__':
    graph = {0: [1, 2], 1: [2], 2: [3], 3: [1, 2]}
    print("Following is Breadth First Traversal: ")
    bfs(graph, 0)
    
Output:
Following is Breadth First Traversal: 
0 1 2 3

Result:
Hence, DFS and BFS for an application is implemented.



5)Aim:
To Develop Best first search and A* Algorithm for real world problems using python.

Algorithm:
1. Initialize an array representing a maze with 0’s and 1’s.
2. Declare start and end points representing the top left and
bottom right corner of the maze.
3. Initialize two array representing open_list and closed_list
4. Starting with the start point , check all the adjacent points.
5. If an adjacent point is a walkable terrain, check all its
adjacent points, and keep track of the path.
6. Continue the process till you find the end point.
7. Print the path.

Program:
class Node():
    def __init__(self, parent=None, position=None):
        self.parent = parent
        self.position = position
 
        self.g = 0
        self.h = 0
        self.f = 0
 
    def __eq__(self, other):
        return self.position == other.position
 
 
def astar(maze, start, end):
    start_node = Node(None, start)
    start_node.g = start_node.h = start_node.f = 0
    end_node = Node(None, end)
    end_node.g = end_node.h = end_node.f = 0
    open_list = []
    closed_list = []
    open_list.append(start_node)
    while len(open_list) > 0:
        current_node = open_list[0]
        current_index = 0
        for index, item in enumerate(open_list):
            if item.f < current_node.f:
                current_node = item
                current_index = index
        open_list.pop(current_index)
        closed_list.append(current_node)
        if current_node == end_node:
            path = []
            current = current_node
            while current is not None:
                path.append(current.position)
                current = current.parent
            return path[::-1] 
        children = []
        for new_position in [(0, -1), (0, 1), (-1, 0), (1, 0), (-1, -1), (-1, 1), (1, -1), (1, 1)]:
            node_position = (current_node.position[0] + new_position[0], current_node.position[1] + new_position[1])
            if node_position[0] > (len(maze) - 1) or node_position[0] < 0 or node_position[1] > (len(maze[len(maze)-1]) -1) or node_position[1] < 0:
                continue
            if maze[node_position[0]][node_position[1]] != 0:
                continue
            new_node = Node(current_node, node_position)
            children.append(new_node)
        for child in children:
            for closed_child in closed_list:
                if child == closed_child:
                    continue
            child.g = current_node.g + 1
            child.h = ((child.position[0] - end_node.position[0]) ** 2) + ((child.position[1] - end_node.position[1]) ** 2)
            child.f = child.g + child.h
            for open_node in open_list:
                if child == open_node and child.g > open_node.g:
                    continue
            open_list.append(child)
 
 
def main():
 
    maze = [[0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
 
    start = (0, 0)
    end = (7, 6)
 
    path = astar(maze, start, end)
    print(path)
 
 
if __name__ == '__main__':
    main()


Output:
[(0, 0), (1, 1), (2, 2), (3, 3), (4, 3), (5, 4), (6, 5), (7, 6)]

Result:
Hence, Best first search and A* Algorithm for real world problems using python was developed successfully.
